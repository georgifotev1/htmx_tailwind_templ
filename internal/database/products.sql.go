// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, category, location, quantity, description, price)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, category, location, quantity, created_at, updated_at, description, price, is_active
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Category    string         `json:"category"`
	Location    string         `json:"location"`
	Quantity    int32          `json:"quantity"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Category,
		arg.Location,
		arg.Quantity,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Location,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Price,
		&i.IsActive,
	)
	return i, err
}

const deleteProductById = `-- name: DeleteProductById :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProductById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductById, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, category, location, quantity, created_at, updated_at, description, price, is_active FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.Location,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Price,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, category, location, quantity, created_at, updated_at, description, price, is_active FROM products
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Location,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Price,
		&i.IsActive,
	)
	return i, err
}

const updateProductById = `-- name: UpdateProductById :one
UPDATE products
SET name = $1, category = $2, location = $3, quantity = $4, description = $5, price = $6, updated_at = NOW()
WHERE id = $7
RETURNING id, name, category, location, quantity, created_at, updated_at, description, price, is_active
`

type UpdateProductByIdParams struct {
	Name        string         `json:"name"`
	Category    string         `json:"category"`
	Location    string         `json:"location"`
	Quantity    int32          `json:"quantity"`
	Description sql.NullString `json:"description"`
	Price       sql.NullString `json:"price"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateProductById(ctx context.Context, arg UpdateProductByIdParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductById,
		arg.Name,
		arg.Category,
		arg.Location,
		arg.Quantity,
		arg.Description,
		arg.Price,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.Location,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Price,
		&i.IsActive,
	)
	return i, err
}
